set hidden 
set incsearch
" disable mouse
set mouse=
set nospell
" daima zhedie
set wrap
"
let g:airline_theme = 'luna'
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        " exec "!g++ % -o %<"
        exec "!gcc % -o %< `pkg-config --cflags --libs gstreamer-1.0`"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        exec "!go build %<" exec "!time go run %"
    elseif &filetype == 'mkd' exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
    endif
endfunc
colorscheme Tomorrow-Night-Eighties
" set guifont=Bitstream\ Vera\ Sans\ Mono\ 12,Fixed\ 12
" set guifont=
" "ale
"始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)


" i,和a,：参数对象，写代码一半在修改，现在可以用di,/ci,一次性删除/改写当前参数
" ii和ai：缩进对象，同一个缩进层次的代码，可以用vii选中，dii/cii删除或改写
" if和af：函数对象，可以用vif/dif/cif来选中/删除/改写函数的内容
"Plug 'kana/vim-textobj-user'
"Plug 'kana/vim-textobj-indent'
"Plug 'kana/vim-textobj-syntax'
"Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
"Plug 'sgur/vim-textobj-parameter

let g:Lf_ShortcutF = '<c-p>'
noremap <leader>r :LeaderfMru<cr>
noremap <leader>f :LeaderfFunction!<cr>
noremap <leader>b :LeaderfBuffer<cr>
noremap <leader>t :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
" let g:Lf_PreviewResult = {'Function':0, 'BufTag':0

noremap <leader>w :w<cr>
let g:pymode_lint_checkers = ['pyflakes']


noremap <leader>r :LeaderfMru<cr>
noremap <leader>f :LeaderfFunction!<cr>
noremap <leader>b :LeaderfBuffer<cr>
noremap <leader>t :LeaderfTag<cr>
map<leader><leader>f <Plug>(easymotion-overwin-f)
map<leader><leader>s <Plug>(easymotion-overwin-f2)
map<leader><leader>l <Plug>(easymotion-overwin-line)
map<leader><leader>w <Plug>(easymotion-overwin-w)
map<leader><leader>. <Plug>(easymotion-repeat)|
" <Leader>f{char}      | Find {char} to the right. See |f|.
" <Leader>F{char}      | Find {char} to the left. See |F|.
" <Leader>t{char}      | Till before the {char} to the right. See |t|.
" <Leader>T{char}      | Till after the {char} to the left. See |T|.
" <Leader>w            | Beginning of word forward. See |w|.
" <Leader>W            | Beginning of WORD forward. See |W|.
" <Leader>b            | Beginning of word backward. See |b|.
" <Leader>B            | Beginning of WORD backward. See |B|.
" <Leader>e            | End of word forward. See |e|.
" <Leader>E            | End of WORD forward. See |E|.
" <Leader>ge           | End of word backward. See |ge|.
" <Leader>gE           | End of WORD backward. See |gE|.
" <Leader>j            | Line downward. See |j|.
" <Leader>k            | Line upward. See |k|.
" <Leader>n            | Jump to latest "/" or "?" forward. See |n|.
" <Leader>N            | Jump to latest "/" or "?" backward. See |N|.
" <Leader>s            | Find(Search) {char} forward and backward.
"                      | See |f| and |F|.let g:rainbow_active = 1
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \   }
            \}
" cscope setting
if has("cscope")
    set csprg=/usr/bin/cscope              "指定用来执行 cscope 的命令
    set csto=1                             "先搜索tags标签文件，再搜索cscope数据库
    set cst                                "使用|:cstag|(:cs find g)，而不是缺省的:tag
    set nocsverb                           "不显示添加数据库是否成功
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out                   "添加cscope数据库
    endif
    set csverb                             "显示添加成功与否
endif

nmap <C-\>s :cs find s <C-R>  = expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>  = expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>  = expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>  = expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>  = expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>  = expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R> = expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>  = expand("<cword>")<CR><CR>
" let g:ale_linters = {'java': []}
let g:ackprg = 'ag --nogroup --nocolor --column --cc --cpp --python'
" map <C-J> <C-W>j<C-W>_
" map <C-K> <C-W>k<C-W>_
" map <C-L> <C-W>l<C-W>_
" map <C-H> <C-W>h<C-W>_
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
" nmap <Leader>a& :Tabularize /&<CR>
" vmap <Leader>a& :Tabularize /&<CR>
" nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
" vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
" nmap <Leader>a=> :Tabularize /=><CR>
" vmap <Leader>a=> :Tabularize /=><CR>
" nmap <Leader>a: :Tabularize /:<CR>
" vmap <Leader>a: :Tabularize /:<CR>
" nmap <Leader>a:: :Tabularize /:\zs<CR>
" vmap <Leader>a:: :Tabularize /:\zs<CR>
" nmap <Leader>a, :Tabularize /,<CR>
" vmap <Leader>a, :Tabularize /,<CR>
" nmap <Leader>a,, :Tabularize /,\zs<CR>
" vmap <Leader>a,, :Tabularize /,\zs<CR>
" nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" nnoremap <silent> <leader>gs :Gstatus<CR>
" nnoremap <silent> <leader>gd :Gdiff<CR>
" nnoremap <silent> <leader>gc :Gcommit<CR>
" nnoremap <silent> <leader>gb :Gblame<CR>
" nnoremap <silent> <leader>gl :Glog<CR>
" nnoremap <silent> <leader>gp :Git push<CR>
" nnoremap <silent> <leader>gr :Gread<CR>
" nnoremap <silent> <leader>gw :Gwrite<CR>
" nnoremap <silent> <leader>ge :Gedit<CR>
" " Mnemonic _i_nteractive
" nnoremap <silent> <leader>gi :Git add -p %<CR>
" nnoremap <silent> <leader>gg :SignifyToggle<CR>
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
" let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone

" noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }

nnoremap <Leader>q :Bdelete<CR>

let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
